line[[7]]  <- as.factor(    line[[7]])
data.frame.read[line.i,] <-line
line.i <- line.i + 1
}
}
# lapply (split.lines)
for (line in split.lines){
line<-as.list(line)
numeric.vars <- c(1:4,8:10)
line[numeric.vars]  <- lapply( line[numeric.vars]
, FUN=as.numeric)
#line[[5]]  <-  as.numeric(line[[5]])
line[[6]]  <- as.character( line[[6]])
line[[7]]  <- as.factor(    line[[7]])
data.frame.read[line.i,] <-line
line.i <- line.i + 1
}
split.lines.df <- Reduce(split.lines,rbind)
?Reduce
split.lines.df <- Reduce(x=split.lines,f=rbind)
str( split.lines.df)
?aggregate
split.lines <- strsplit(read.chunk,split=',')
# lapply (split.lines)
for (line in split.lines){
line<-as.list(line)
numeric.vars <- c(1:4,8:10)
line[numeric.vars]  <- lapply( line[numeric.vars]
, FUN=as.numeric)
#line[[5]]  <-  as.numeric(line[[5]])
line[[6]]  <- as.character( line[[6]])
line[[7]]  <- as.factor(    line[[7]])
data.frame.read[line.i,] <-line
line.i <- line.i + 1
}
read.table
?read.table
?readLines
t.read<-read.table(file.conn)
t.read<- read.table(file.conn,nrows=line.count,sep=",",colClasses=
c("integer","integer","integer","integer",
"numeric","character","character","numeric",
"numeric","numeric")
)
t.read<- read.csv(file.conn,nrows=line.count,sep=","
,colClasses=
c("integer","integer","integer","integer",
"numeric","character","character","numeric",
"numeric","numeric"))
read.chunk[[1]]
t.read<- read.csv(file.conn,nrows=line.count,sep=","
,colClasses=
c("integer","integer","integer","integer",
"numeric","character","character","numeric",
"numeric","numeric"),fill=TRUE)
t.read<- read.csv(file.conn,nrows=line.count,sep=","
,colClasses=
c("integer","integer","integer","integer",
"numeric","character","character","character",
"character","character"),fill=TRUE)
t.read<- read.csv(file.conn,nrows=line.count,sep=","
,colClasses=
c("integer","integer","integer","integer",
"numeric","character","character","character",
"numeric","numeric"),fill=TRUE)
line.ptr<-0
data.frame.read <- read.csv(file.conn, nrows=line.count
, col.names = c(
"traceNum", "vp","time","hop"
, "delay", "IP"  , "country"
, "AS" , "lat", "lon" )
,colClasses=
c("integer","integer","integer"
,"integer","numeric","character"
,"character","character",
"numeric","numeric"),fill=TRUE
,sep=",", stringsAsFactors=FALSE
,skip=line.ptr)
data.frame.read[,1]
table()data.frame.read$hop
table(data.frame.read$hop)
?which
?which.max
?which
data.fram.read[,1:2]
data.frame.read[,1:2]
data.frame.read[1:2,]
data.frame.read[1:4,]
data.frame.read[1:5,]
data.frame.read[1:10,]
rm(file.conn)
file.conn <- gzfile(description=filename,open="r")
data.frame.read <- read.csv(file.conn, nrows=line.count
, col.names = c(
"traceNum", "vp","time","hop"
, "delay", "IP"  , "country"
, "AS" , "lat", "lon" )
,colClasses=
c("integer","integer","integer"
,"integer","numeric","character"
,"character","character",
"numeric","numeric"),fill=TRUE
,sep=",", stringsAsFactors=FALSE
,skip=line.ptr)
data.frame.read[,1]
data.frame.read[1,]
data.frame.read[1:5,]
data.frame.read <- read.csv(file.conn, nrows=line.count
, col.names = c(
"traceNum", "vp","time","hop"
, "delay", "IP"  , "country"
, "AS" , "lat", "lon" )
,colClasses=
c("integer","integer","integer"
,"integer","numeric","character"
,"character","character",
"numeric","numeric"),fill=TRUE
,sep=",", stringsAsFactors=FALSE
,skip=line.ptr)
data.frame.read[1:5,]
remains.of.prev.traceroute <-    data.frame(
traceNum = rep(as.integer(0) , line.count)
, vp   = rep(as.integer(0),line.count)
, time = rep(as.integer(0),line.count)
, hop  = rep(as.integer(0),line.count)
, delay= rep(as.numeric(0),line.count)
, IP   = rep("",line.count)
, country = rep("",line.count)
, AS   = rep("",line.count)
, lat  = rep("",line.count)
, lon  = rep("",line.count)
)
?data.frame
as.data.frame
remains.of.prev.traceroute <-    data.frame(
traceNum = integer(0)
, vp   = integer(0)
, time = integer(0)
, hop  = integer(0)
, delay= numeric(0)
, IP   = ""
, country = ""
, AS   = ""
, lat  = numeric(0)
, lon  = numeric(0)
)
remains.of.prev.traceroute <-    data.frame(
traceNum = integer(0)
, vp   = integer(0)
, time = integer(0)
, hop  = integer(0)
, delay= numeric(0)
, IP   = character(0)
, country = character(0)
, AS   = character(0)
, lat  = numeric(0)
, lon  = numeric(0)
)
remains.of.prev.traceroute
data.frame.read <- rbind(remains.of.prev.traceroute
,data.frame.read)
#find beginning of last traceroute in read chunk
line.ptr <- tail(which(data.frame.read$hop==0),1)
remains.of.prev.traceroute <- data.frame.read[line.ptr:line.count,]
nrow(data.frame.read)
remains.of.prev.traceroute
data.frame.read<- data.frame.read[-line.ptr:line.count,]
data.frame.read<- data.frame.read[-(line.ptr:line.count),]
nrow(data.frame.read)
filter.row.var <- (data.frame.read$hop>0  &
data.frame.read$hop < n.first.hops) &
(data.frame.read$vp == vant.pt)
n.first.hops <- 7
filter.row.var <- (data.frame.read$hop>0  &
data.frame.read$hop <= n.first.hops) &
(data.frame.read$vp == vant.pt)
filter.col.var <- c(1,6,3,5) # traceNum, IP, time, delay
table(data.frame.read$vt)
table(data.frame.read$vt.pt)
table(data.frame.read$vp)
vant.pt <- 4149
filter.col.var <- c(1,6,3,5) # traceNum, IP, time, delay
data.frame.read <- data.frame.read[filter.row.var,][,filter.col.var]
filter.row.var <- (data.frame.read$hop>0  &
data.frame.read$hop <= n.first.hops) &
(data.frame.read$vp %in% vant.pt)
filter.col.var <- c(1,6,3,5) # traceNum, IP, time, delay
data.frame.read <- data.frame.read[filter.row.var,][,filter.col.var]
dim*(data.frame.read)
dim(data.frame.read)
hops2edges <- function(hoplist,vant.pt){
num.hops<- nrow(hoplist)
num.edges <- (num.hops-1)
#num.attribs <- 2  #ncol(hoplist) - 2
edge.list <- data.frame(v1=rep(NA,num.edges),
v2=rep(NA,num.edges),
time=rep("",num.edges),
delay= rep(NA,num.edges))
edge.list[,2:4] <- hoplist[,2:4]
edge.list[1,]<- c(vant.pt,hoplist[1:(num.edges-1),2])
}
edgelist.with.attribs <- ddply(   .data=data.frame.read
,  .variables=traceNum
,  .fun=hops2edges,vant.pt)
names(data.frame.read)
edgelist.with.attribs <- ddply(   .data=data.frame.read
,  .variables="traceNum"
,  .fun=hops2edges,vant.pt)
warnings()
hops2edges <- function(hoplist,vant.pt){
num.hops<- nrow(hoplist)
num.edges <- (num.hops)
#num.attribs <- 2  #ncol(hoplist) - 2
edge.list <- data.frame(v1=rep(NA,num.edges),
v2=rep(NA,num.edges),
time=rep("",num.edges),
delay= rep(NA,num.edges))
edge.list[,2:4] <- hoplist[,2:4]
edge.list[1,]<- c(vant.pt,hoplist[1:(num.edges-1),2])
}
edgelist.with.attribs <- ddply(   .data=data.frame.read
,  .variables="traceNum"
,  .fun=hops2edges,vant.pt)
warnings()
hops2edges <- function(hoplist,vant.pt){
num.hops<- nrow(hoplist)
num.edges <- (num.hops)
#num.attribs <- 2  #ncol(hoplist) - 2
edge.list <- data.frame(v1=rep(NA,num.edges),
v2=rep(NA,num.edges),
time=rep("",num.edges),
delay= rep(NA,num.edges))
edge.list[,2:4] <- hoplist[,2:4]
edge.list[,1]<- c(vant.pt,hoplist[1:(num.edges-1),2])
}
edgelist.with.attribs <- ddply(   .data=data.frame.read
,  .variables="traceNum"
,  .fun=hops2edges,vant.pt)
head(edgelist.with.attribs)
edgelist.with.attribs$v1
?ddply
hops2edges <- function(hoplist,vant.pt){
num.hops<- nrow(hoplist)
num.edges <- (num.hops)
#num.attribs <- 2  #ncol(hoplist) - 2
edge.list <- data.frame(v1=rep(NA,num.edges),
v2=rep(NA,num.edges),
time=rep("",num.edges),
delay= rep(NA,num.edges))
edge.list[,2:4] <- hoplist[,2:4]
edge.list[,1]<- c(vant.pt,hoplist[1:(num.edges-1),2])
return(edge.list)
}
hops2edges <- function(hoplist,vant.pt){
num.hops<- nrow(hoplist)
num.edges <- (num.hops)
#num.attribs <- 2  #ncol(hoplist) - 2
edge.list <- data.frame(v1=rep(NA,num.edges),
v2=rep(NA,num.edges),
time=rep("",num.edges),
delay= rep(NA,num.edges))
edge.list[,2:4] <- hoplist[,2:4]
edge.list[,1]<- c(vant.pt,hoplist[1:(num.edges-1),2])
return(edge.list)
}
edgelist.with.attribs <- ddply(   .data=data.frame.read
,  .variables="traceNum"
,  .fun=hops2edges,vant.pt)
head(edgelist.with.attribs)
head(edgelist.with.attribs,n=20)
file.conn <- gzfile(description=filename,open="r")
# read.chunk <- "a"
continue.file.read <-TRUE
line.ptr<-0
remains.of.prev.traceroute <-    data.frame(
traceNum = integer(0) ,    vp     = integer(0)
,  time   = integer(0) ,    hop    = integer(0)
,  delay  = numeric(0) ,    IP     = character(0)
,  country = character(0) , AS     = character(0)
,  lat  = numeric(0)      , lon    = numeric(0)
)
while (continue.file.read){
data.frame.read <- read.csv(file.conn, nrows=line.count
, col.names = c(
"traceNum", "vp","time","hop"
, "delay", "IP"  , "country"
, "AS" , "lat", "lon" )
,colClasses=
c("integer","integer","integer"
,"integer", "numeric" ,"character"
,"character" ,"character"
,"numeric" ,"numeric")
,fill=TRUE
,sep=",", stringsAsFactors=FALSE
)
file.conn <- gzfile(description=filename,open="r")
# read.chunk <- "a"
continue.file.read <-TRUE
line.ptr<-0
remains.of.prev.traceroute <-    data.frame(
traceNum = integer(0) ,    vp     = integer(0)
,  time   = integer(0) ,    hop    = integer(0)
,  delay  = numeric(0) ,    IP     = character(0)
,  country = character(0) , AS     = character(0)
,  lat  = numeric(0)      , lon    = numeric(0)
)
data.frame.read <- read.csv(file.conn, nrows=line.count
, col.names = c(
"traceNum", "vp","time","hop"
, "delay", "IP"  , "country"
, "AS" , "lat", "lon" )
,colClasses=
c("integer","integer","integer"
,"integer", "numeric" ,"character"
,"character" ,"character"
,"numeric" ,"numeric")
,fill=TRUE
,sep=",", stringsAsFactors=FALSE
)
if (nrow(data.frame.read)==0)
continue.file.read<-FALSE
data.frame.read <- rbind(remains.of.prev.traceroute
,data.frame.read)
#find beginning of last traceroute in read chunk
line.ptr <- tail(which(data.frame.read$hop==0),1)
remains.of.prev.traceroute <- data.frame.read[line.ptr:line.count,]
data.frame.read<- data.frame.read[-(line.ptr:line.count),]
#filter to get only the first n.first.hops and
#only those vantage point
filter.row.var <- (data.frame.read$hop>0  &
data.frame.read$hop <= n.first.hops) &
(data.frame.read$vp %in% vant.pt)
filter.col.var <- c(1,6,3,5) # traceNum, IP, time, delay
data.frame.read <- data.frame.read[filter.row.var,][,filter.col.var]
edgelist.with.attribs <- ddply(.data=data.frame.read
,  .variables="traceNum"
,  .fun=hops2edges,vant.pt)
#ffdf.read <- ffdfappend (ffdf.read, data.frame.read)
ffdf.edgelist.read <- ffdfappend (ffdf.edgelist.read , edgelist.with.attribs )
str( ffdf.edgelist.read)
data.frame.read <- read.csv(file.conn, nrows=line.count
, col.names = c(
"traceNum", "vp","time","hop"
, "delay", "IP"  , "country"
, "AS" , "lat", "lon" )
,colClasses=
c("integer","integer","integer"
,"integer", "numeric" ,"character"
,"character" ,"character"
,"numeric" ,"numeric")
,fill=TRUE
,sep=",", stringsAsFactors=FALSE
)
if (nrow(data.frame.read)==0)
continue.file.read<-FALSE
data.frame.read <- rbind(remains.of.prev.traceroute
,data.frame.read)
#find beginning of last traceroute in read chunk
line.ptr <- tail(which(data.frame.read$hop==0),1)
remains.of.prev.traceroute <- data.frame.read[line.ptr:line.count,]
#remove the possible portion of traceroute
data.frame.read<- data.frame.read[-(line.ptr:line.count),]
#filter to get only the first n.first.hops and
#only those vantage point
filter.row.var <- (data.frame.read$hop>0  &
data.frame.read$hop <= n.first.hops) &
(data.frame.read$vp %in% vant.pt)
filter.col.var <- c(1,6,3,5) # traceNum, IP, time, delay
data.frame.read <- data.frame.read[filter.row.var,][,filter.col.var]
edgelist.with.attribs <- ddply(.data=data.frame.read
,  .variables="traceNum"
,  .fun=hops2edges,vant.pt)
#ffdf.read <- ffdfappend (ffdf.read, data.frame.read)
ffdf.edgelist.read <- ffdfappend (ffdf.edgelist.read , edgelist.with.attribs )
}
dim(ffdf.edgelist.read )
data.frame.read <- read.csv(file.conn, nrows=line.count
, col.names = c(
"traceNum", "vp","time","hop"
, "delay", "IP"  , "country"
, "AS" , "lat", "lon" )
,colClasses=
c("integer","integer","integer"
,"integer", "numeric" ,"character"
,"character" ,"character"
,"numeric" ,"numeric")
,fill=TRUE
,sep=",", stringsAsFactors=FALSE
)
if (nrow(data.frame.read)==0)
continue.file.read<-FALSE
data.frame.read <- rbind(remains.of.prev.traceroute
,data.frame.read)
#find beginning of last traceroute in read chunk
line.ptr <- tail(which(data.frame.read$hop==0),1)
remains.of.prev.traceroute <- data.frame.read[line.ptr:line.count,]
#remove the possible portion of traceroute
data.frame.read<- data.frame.read[-(line.ptr:line.count),]
#filter to get only the first n.first.hops and
#only those vantage point
filter.row.var <- (data.frame.read$hop>0  &
data.frame.read$hop <= n.first.hops) &
(data.frame.read$vp %in% vant.pt)
filter.col.var <- c(1,6,3,5) # traceNum, IP, time, delay
data.frame.read <- data.frame.read[filter.row.var,][,filter.col.var]
edgelist.with.attribs <- ddply(.data=data.frame.read
,  .variables="traceNum"
,  .fun=hops2edges,vant.pt)
#ffdf.read <- ffdfappend (ffdf.read, data.frame.read)
ffdf.edgelist.read <- ffdfappend (ffdf.edgelist.read , edgelist.with.attribs )
}
dim(ffdf.edgelist.read )
library(devtools)
getwd()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
EmbedOOS <- function (X.is, Atable.edgelist ){
uniq.edgelist<- unique( Atable.edgelist)
v.is.names <- rownames(X.is)
v.oos.names <- as.character( unique( uniq.edgelist[,2]))
dim <- dim(X.is)[2]
bip.graph <- graph.edgelist(matrix(uniq.edgelist,ncol=2),directed=FALSE)
A.test  <- get.adjacency(bip.graph)
A.table <- A.test [v.is.names ,v.oos.names]
Embedded.coords.oos <-inverse.rdpg.oos(A=X.is,
Anew=A.table,
dim=dim)
}
if (!exists("kiva.lender_lender.edgelist")){
kiva.adjmat.embed.demo.R <-   system.file("kiva_AdjMatEmbed.R", package="AdjMatEmbed")
source(kiva.adjmat.embed.demo.R)
}
kiva.adjmat.embed.demo.R
if (!exists("kiva.lender_lender.edgelist")){
kiva.adjmat.embed.demo.R <-   system.file("demo",kiva_AdjMatEmbed.R", package="AdjMatEmbed")
source(kiva.adjmat.embed.demo.R)
}
kiva.adjmat.embed.demo.R
kiva.adjmat.embed.demo.R <-   system.file("demo","kiva_AdjMatEmbed.R", package="AdjMatEmbed")
kiva.adjmat.embed.demo.R
source(kiva.adjmat.embed.demo.R)
if (!exists("kiva.lender_lender.edgelist")){
kiva.adjmat.embed.demo.R <-   system.file("demo","kiva_AdjMatEmbed.R", package="AdjMatEmbed")
source(kiva.adjmat.embed.demo.R)
}
if (!exists("kiva.lender_lender.edgelist")){
kiva.adjmat.embed.demo.R <-   system.file("demo","kiva_AdjMatEmbed.R", package="AdjMatEmbed")
source(kiva.adjmat.embed.demo.R)
}
getwd()
traceback()
source('~/GitHub/gitxdata/tools/analytics/jhu/AdjMatEmbed/R/kiva-preprocess.R')
source('~/GitHub/gitxdata/tools/analytics/jhu/AdjMatEmbed/R/kiva-preprocess.R')
source('~/GitHub/gitxdata/tools/analytics/jhu/AdjMatEmbed/R/kiva-preprocess.R')
source('~/GitHub/gitxdata/tools/analytics/jhu/AdjMatEmbed/R/kiva-preprocess.R')
if (!exists("kiva.lender_lender.edgelist")){
kiva.adjmat.embed.demo.R <-   system.file("demo","kiva_AdjMatEmbed.R", package="AdjMatEmbed")
source(kiva.adjmat.embed.demo.R)
}
options(error=recover)
if (!exists("kiva.lender_lender.edgelist")){
kiva.adjmat.embed.demo.R <-   system.file("demo","kiva_AdjMatEmbed.R", package="AdjMatEmbed")
source(kiva.adjmat.embed.demo.R)
}
file
ls()
open
description
Q
devtools::load_all()
if (!exists("kiva.lender_lender.edgelist")){
kiva.adjmat.embed.demo.R <-   system.file("demo","kiva_AdjMatEmbed.R", package="AdjMatEmbed")
source(kiva.adjmat.embed.demo.R)
}
ls()
ls()
ls()
file
getwd()
kiva.data.loc<-paste(getwd(),"/inst/extdata")
kiva.lender_lender.edgelist <- load.kiva( kiva.data.loc)
kiva.lender_lender.edgelist <- load.kiva( kiva.data.loc)
kiva.data.loc<-paste(getwd(),"/inst/extdata")
print(kiva.data.loc)
kiva.data.loc<-paste(getwd(),"/inst/extdata",sep="")
print(kiva.data.loc)
kiva.lender_lender.edgelist <- load.kiva( kiva.data.loc)
names(kiva.lender_lender.edgelist)<-c("v1","v2")
kiva.all.table <- load.kiva.all.table(kiva.data.loc)
devtools::load_all()
kiva.all.table <- load.kiva.all.table(kiva.data.loc)
colnames(kiva.all.table)
head(kiva.all.table)
head(kiva.all.table$V1)
max(kiva.all.table$V1)
max(kiva.all.table$V2)
max(kiva.all.table$V3)
max(kiva.all.table$V4)
names(kiva.all_table)<- c("loan","lender","borrower","partner")
names(kiva.all.table)<- c("loan","lender","borrower","partner")
kiva.lender_partner.edgelist <- load.kiva.lender.partner(kiva.data.loc)
dim(kiva.lender_partner.edgelist)
names(kiva.lender_partner.edgelist)<-c("lender","partner")
Partner.Embed <- EmbedOOS (lender.embed.all, kiva.lender_partner.edgelist)
lender.embed.dim.10<- graphEmbedCluster  (kiva.lender_lender.edgelist
, embed.dim=10
, core.v.chunk.size = 2000
,v.chunk.size=Inf)
library(ff)
?ffapply
